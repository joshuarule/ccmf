:root {
  --unit: 4px;
  @for $i from 0 through 60 {
    --unit-#{$i}: calc(var(--unit) * #{$i});
  }
}

// breakpoints

$breakpoints: '', bp-1, bp-2;
$bp-1-width: 768px;
$bp-menuWidth: 920px;
$bp-2-width: 1024px;

@mixin only_bp-0 {
  @media (max-width: #{$bp-1-width - 1}) {
    @content;
  }
}

@mixin bp-1 {
  @media (min-width: #{$bp-1-width}) {
    @content;
  }
}

@mixin bp-2 {
  @media (min-width: #{$bp-2-width}) {
    @content;
  }
}

@mixin bp-menuLarge {
  @media (min-width: #{$bp-menuWidth - 1}) {
    @content;
  }
}
@mixin only_bp-menuSmall {
  @media (max-width: #{$bp-menuWidth - 1}) {
    @content;
  }
}

// Functions

@function uncapitalize($string) {
  @return to-lower-case(str-slice($string, 1, 1)) + str-slice($string, 2);
}

// Spacing Helpers

$props: 'margin' 'padding';
$propsAdj: "", "Vertical", "Horizontal", "Left", "Bottom", "Right", "Top";

@for $h from 1 through length($breakpoints) {
  @for $i from 1 through length($props) {
    @for $j from 1 through length($propsAdj) {
      @for $k from 0 through 60 {
        @if nth($propsAdj, $j) == 'Vertical' {
          @if nth($breakpoints, $h) == 'bp-1' {
            .#{nth($breakpoints, $h)}_#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              @include bp-1 {
                #{nth($props, $i)}-top: var(--unit-#{$k}) !important;
                #{nth($props, $i)}-bottom: var(--unit-#{$k}) !important;
              }
            }
          } @else if nth($breakpoints, $h) == 'bp-2' {
            .#{nth($breakpoints, $h)}_#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              @include bp-2 {
                #{nth($props, $i)}-top: var(--unit-#{$k}) !important;
                #{nth($props, $i)}-bottom: var(--unit-#{$k}) !important;
              }
            }
          }
          @else {
            .#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              #{nth($props, $i)}-top: var(--unit-#{$k}) !important;
              #{nth($props, $i)}-bottom: var(--unit-#{$k}) !important;
            }
          }
        } 
        @else if nth($propsAdj, $j) == 'Horizontal' {
          @if nth($breakpoints, $h) == 'bp-1' {
            .#{nth($breakpoints, $h)}_#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              @include bp-1 {
                #{nth($props, $i)}-left: var(--unit-#{$k}) !important;
                #{nth($props, $i)}-right: var(--unit-#{$k}) !important;
              }
            }
          } @else if nth($breakpoints, $h) == 'bp-2' {
            .#{nth($breakpoints, $h)}_#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              @include bp-2 {
                #{nth($props, $i)}-left: var(--unit-#{$k}) !important;
                #{nth($props, $i)}-right: var(--unit-#{$k}) !important;
              }
            }
          } @else {
            .#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              #{nth($props, $i)}-left: var(--unit-#{$k}) !important;
              #{nth($props, $i)}-right: var(--unit-#{$k}) !important;
            }
          }
        } @else if nth($propsAdj, $j) == '' {
          .#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
            #{nth($props, $i)}: var(--unit-#{$k}) !important;
          }
        } @else {
          @if nth($breakpoints, $h) == 'bp-1' {
            .#{nth($breakpoints, $h)}_#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              @include bp-1 {
                #{nth($props, $i)}-#{uncapitalize(nth($propsAdj, $j))}: var(--unit-#{$k}) !important;
              }
            }
          } @else if nth($breakpoints, $h) == 'bp-2' {
            .#{nth($breakpoints, $h)}_#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              @include bp-2 {
                #{nth($props, $i)}-#{uncapitalize(nth($propsAdj, $j))}: var(--unit-#{$k}) !important;
              }
            }
          } @else {
            .#{nth($props, $i)}#{nth($propsAdj, $j)}-#{$k} {
              #{nth($props, $i)}-#{uncapitalize(nth($propsAdj, $j))}: var(--unit-#{$k}) !important;
            }
          }
        }
      }
    }
  }
}